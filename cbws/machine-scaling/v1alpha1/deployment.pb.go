// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: cbws/machine_scaling/v1alpha1/deployment.proto

package v1alpha1

import (
	v1alpha1 "github.com/cbws/go-cbws-grpc/cbws/virtual-machines/affinity/v1alpha1"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Deployment_Strategy_InstanceUpdateStrategy int32

const (
	Deployment_Strategy_INSTANCE_UPDATE_STRATEGY_UNSPECIFIED Deployment_Strategy_InstanceUpdateStrategy = 0
	// Replace the instances ones the template changes
	Deployment_Strategy_INSTANCE_UPDATE_STRATEGY_REPLACE Deployment_Strategy_InstanceUpdateStrategy = 1
	// Update the instances once the template changes
	Deployment_Strategy_INSTANCE_UPDATE_STRATEGY_UPDATE Deployment_Strategy_InstanceUpdateStrategy = 2
	// Do nothing once the template changes
	Deployment_Strategy_INSTANCE_UPDATE_STRATEGY_NONE Deployment_Strategy_InstanceUpdateStrategy = 3
)

// Enum value maps for Deployment_Strategy_InstanceUpdateStrategy.
var (
	Deployment_Strategy_InstanceUpdateStrategy_name = map[int32]string{
		0: "INSTANCE_UPDATE_STRATEGY_UNSPECIFIED",
		1: "INSTANCE_UPDATE_STRATEGY_REPLACE",
		2: "INSTANCE_UPDATE_STRATEGY_UPDATE",
		3: "INSTANCE_UPDATE_STRATEGY_NONE",
	}
	Deployment_Strategy_InstanceUpdateStrategy_value = map[string]int32{
		"INSTANCE_UPDATE_STRATEGY_UNSPECIFIED": 0,
		"INSTANCE_UPDATE_STRATEGY_REPLACE":     1,
		"INSTANCE_UPDATE_STRATEGY_UPDATE":      2,
		"INSTANCE_UPDATE_STRATEGY_NONE":        3,
	}
)

func (x Deployment_Strategy_InstanceUpdateStrategy) Enum() *Deployment_Strategy_InstanceUpdateStrategy {
	p := new(Deployment_Strategy_InstanceUpdateStrategy)
	*p = x
	return p
}

func (x Deployment_Strategy_InstanceUpdateStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Deployment_Strategy_InstanceUpdateStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_cbws_machine_scaling_v1alpha1_deployment_proto_enumTypes[0].Descriptor()
}

func (Deployment_Strategy_InstanceUpdateStrategy) Type() protoreflect.EnumType {
	return &file_cbws_machine_scaling_v1alpha1_deployment_proto_enumTypes[0]
}

func (x Deployment_Strategy_InstanceUpdateStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Deployment_Strategy_InstanceUpdateStrategy.Descriptor instead.
func (Deployment_Strategy_InstanceUpdateStrategy) EnumDescriptor() ([]byte, []int) {
	return file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescGZIP(), []int{0, 1, 0}
}

type Deployment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// The amount of machine instances to deploy, defaults to 1
	Replicas int32                `protobuf:"varint,3,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Selector *Deployment_Selector `protobuf:"bytes,4,opt,name=selector,proto3" json:"selector,omitempty"`
	Strategy *Deployment_Strategy `protobuf:"bytes,5,opt,name=strategy,proto3" json:"strategy,omitempty"`
	// Types that are assignable to Template:
	//	*Deployment_VirtualMachine
	Template isDeployment_Template `protobuf_oneof:"template"`
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescGZIP(), []int{0}
}

func (x *Deployment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Deployment) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *Deployment) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *Deployment) GetSelector() *Deployment_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *Deployment) GetStrategy() *Deployment_Strategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

func (m *Deployment) GetTemplate() isDeployment_Template {
	if m != nil {
		return m.Template
	}
	return nil
}

func (x *Deployment) GetVirtualMachine() *Deployment_VirtualMachineTemplate {
	if x, ok := x.GetTemplate().(*Deployment_VirtualMachine); ok {
		return x.VirtualMachine
	}
	return nil
}

type isDeployment_Template interface {
	isDeployment_Template()
}

type Deployment_VirtualMachine struct {
	VirtualMachine *Deployment_VirtualMachineTemplate `protobuf:"bytes,6,opt,name=virtual_machine,json=virtualMachine,proto3,oneof"`
}

func (*Deployment_VirtualMachine) isDeployment_Template() {}

type Deployment_Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchLabels map[string]string `protobuf:"bytes,1,rep,name=match_labels,json=matchLabels,proto3" json:"match_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Deployment_Selector) Reset() {
	*x = Deployment_Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_Selector) ProtoMessage() {}

func (x *Deployment_Selector) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_Selector.ProtoReflect.Descriptor instead.
func (*Deployment_Selector) Descriptor() ([]byte, []int) {
	return file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Deployment_Selector) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

type Deployment_Strategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether instances should be replaced (default), updated or nothing should be done once the instance spec changes.
	InstanceUpdateStrategy Deployment_Strategy_InstanceUpdateStrategy `protobuf:"varint,1,opt,name=instance_update_strategy,json=instanceUpdateStrategy,proto3,enum=cbws.machine_scaling.v1alpha1.Deployment_Strategy_InstanceUpdateStrategy" json:"instance_update_strategy,omitempty"`
}

func (x *Deployment_Strategy) Reset() {
	*x = Deployment_Strategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_Strategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_Strategy) ProtoMessage() {}

func (x *Deployment_Strategy) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_Strategy.ProtoReflect.Descriptor instead.
func (*Deployment_Strategy) Descriptor() ([]byte, []int) {
	return file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Deployment_Strategy) GetInstanceUpdateStrategy() Deployment_Strategy_InstanceUpdateStrategy {
	if x != nil {
		return x.InstanceUpdateStrategy
	}
	return Deployment_Strategy_INSTANCE_UPDATE_STRATEGY_UNSPECIFIED
}

type Deployment_VirtualMachineTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu      int64    `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory   int64    `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	RootDisk int64    `protobuf:"varint,3,opt,name=root_disk,json=rootDisk,proto3" json:"root_disk,omitempty"`
	SshKeys  []string `protobuf:"bytes,4,rep,name=ssh_keys,json=sshKeys,proto3" json:"ssh_keys,omitempty"`
	// If specified, the instance's scheduling constraints
	Affinity *v1alpha1.Affinity `protobuf:"bytes,5,opt,name=affinity,proto3" json:"affinity,omitempty"`
	// A list of labels useful for filtering, affinities and load balancing.
	Labels map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Deployment_VirtualMachineTemplate) Reset() {
	*x = Deployment_VirtualMachineTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deployment_VirtualMachineTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment_VirtualMachineTemplate) ProtoMessage() {}

func (x *Deployment_VirtualMachineTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment_VirtualMachineTemplate.ProtoReflect.Descriptor instead.
func (*Deployment_VirtualMachineTemplate) Descriptor() ([]byte, []int) {
	return file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Deployment_VirtualMachineTemplate) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *Deployment_VirtualMachineTemplate) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *Deployment_VirtualMachineTemplate) GetRootDisk() int64 {
	if x != nil {
		return x.RootDisk
	}
	return 0
}

func (x *Deployment_VirtualMachineTemplate) GetSshKeys() []string {
	if x != nil {
		return x.SshKeys
	}
	return nil
}

func (x *Deployment_VirtualMachineTemplate) GetAffinity() *v1alpha1.Affinity {
	if x != nil {
		return x.Affinity
	}
	return nil
}

func (x *Deployment_VirtualMachineTemplate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

var File_cbws_machine_scaling_v1alpha1_deployment_proto protoreflect.FileDescriptor

var file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x36, 0x63, 0x62, 0x77, 0x73, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x0a, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x05, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x05,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x62,
	0x77, 0x73, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x53,
	0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x70, 0x0a, 0x0f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63,
	0x62, 0x77, 0x73, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x1a, 0xb7, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x6b, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a,
	0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0xc8, 0x02, 0x0a, 0x08, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x88, 0x01, 0x0a,
	0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x49, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52,
	0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x45, 0x47, 0x59, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x1a, 0x88, 0x03, 0x0a, 0x16, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x1b, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x6f, 0x6f,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x08, 0x73,
	0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x07, 0x73, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x61,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12,
	0x69, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4c, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x03, 0xe0,
	0x41, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x3a, 0x42, 0xea, 0x41, 0x3f, 0x0a, 0x16, 0x6d, 0x73, 0x2e, 0x63,
	0x62, 0x77, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x2f, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x42, 0x0a, 0x0a, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x62, 0x77, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x62, 0x77, 0x73,
	0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x62, 0x77, 0x73, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x2d, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescOnce sync.Once
	file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescData = file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDesc
)

func file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescGZIP() []byte {
	file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescOnce.Do(func() {
		file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescData = protoimpl.X.CompressGZIP(file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescData)
	})
	return file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDescData
}

var file_cbws_machine_scaling_v1alpha1_deployment_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cbws_machine_scaling_v1alpha1_deployment_proto_goTypes = []interface{}{
	(Deployment_Strategy_InstanceUpdateStrategy)(0), // 0: cbws.machine_scaling.v1alpha1.Deployment.Strategy.InstanceUpdateStrategy
	(*Deployment)(nil),                        // 1: cbws.machine_scaling.v1alpha1.Deployment
	(*Deployment_Selector)(nil),               // 2: cbws.machine_scaling.v1alpha1.Deployment.Selector
	(*Deployment_Strategy)(nil),               // 3: cbws.machine_scaling.v1alpha1.Deployment.Strategy
	(*Deployment_VirtualMachineTemplate)(nil), // 4: cbws.machine_scaling.v1alpha1.Deployment.VirtualMachineTemplate
	nil,                       // 5: cbws.machine_scaling.v1alpha1.Deployment.Selector.MatchLabelsEntry
	nil,                       // 6: cbws.machine_scaling.v1alpha1.Deployment.VirtualMachineTemplate.LabelsEntry
	(*v1alpha1.Affinity)(nil), // 7: cbws.virtual_machines.affinity.v1alpha1.Affinity
}
var file_cbws_machine_scaling_v1alpha1_deployment_proto_depIdxs = []int32{
	2, // 0: cbws.machine_scaling.v1alpha1.Deployment.selector:type_name -> cbws.machine_scaling.v1alpha1.Deployment.Selector
	3, // 1: cbws.machine_scaling.v1alpha1.Deployment.strategy:type_name -> cbws.machine_scaling.v1alpha1.Deployment.Strategy
	4, // 2: cbws.machine_scaling.v1alpha1.Deployment.virtual_machine:type_name -> cbws.machine_scaling.v1alpha1.Deployment.VirtualMachineTemplate
	5, // 3: cbws.machine_scaling.v1alpha1.Deployment.Selector.match_labels:type_name -> cbws.machine_scaling.v1alpha1.Deployment.Selector.MatchLabelsEntry
	0, // 4: cbws.machine_scaling.v1alpha1.Deployment.Strategy.instance_update_strategy:type_name -> cbws.machine_scaling.v1alpha1.Deployment.Strategy.InstanceUpdateStrategy
	7, // 5: cbws.machine_scaling.v1alpha1.Deployment.VirtualMachineTemplate.affinity:type_name -> cbws.virtual_machines.affinity.v1alpha1.Affinity
	6, // 6: cbws.machine_scaling.v1alpha1.Deployment.VirtualMachineTemplate.labels:type_name -> cbws.machine_scaling.v1alpha1.Deployment.VirtualMachineTemplate.LabelsEntry
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_cbws_machine_scaling_v1alpha1_deployment_proto_init() }
func file_cbws_machine_scaling_v1alpha1_deployment_proto_init() {
	if File_cbws_machine_scaling_v1alpha1_deployment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_Strategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deployment_VirtualMachineTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Deployment_VirtualMachine)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cbws_machine_scaling_v1alpha1_deployment_proto_goTypes,
		DependencyIndexes: file_cbws_machine_scaling_v1alpha1_deployment_proto_depIdxs,
		EnumInfos:         file_cbws_machine_scaling_v1alpha1_deployment_proto_enumTypes,
		MessageInfos:      file_cbws_machine_scaling_v1alpha1_deployment_proto_msgTypes,
	}.Build()
	File_cbws_machine_scaling_v1alpha1_deployment_proto = out.File
	file_cbws_machine_scaling_v1alpha1_deployment_proto_rawDesc = nil
	file_cbws_machine_scaling_v1alpha1_deployment_proto_goTypes = nil
	file_cbws_machine_scaling_v1alpha1_deployment_proto_depIdxs = nil
}
