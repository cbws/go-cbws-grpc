// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cbws/vpn/v1alpha1/instance.proto

package v1alpha1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Instance struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent      string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The IPv6 prefix from which profile addresses will be allocated
	Ipv6Prefix string `protobuf:"bytes,4,opt,name=ipv6_prefix,json=ipv6Prefix,proto3" json:"ipv6_prefix,omitempty"`
	// Whether to make the VPN the default IPv6 gateway on profile clients
	Ipv6DefaultGateway bool `protobuf:"varint,5,opt,name=ipv6_default_gateway,json=ipv6DefaultGateway,proto3" json:"ipv6_default_gateway,omitempty"`
	// Whether to make the VPN the default IPv4 gateway on profile clients
	// This is not recommended and only included for completeness and specific use-cases. IPv6 should be used for
	// accessing private services whenever possible.
	Ipv4DefaultGateway   bool     `protobuf:"varint,6,opt,name=ipv4_default_gateway,json=ipv4DefaultGateway,proto3" json:"ipv4_default_gateway,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}
func (*Instance) Descriptor() ([]byte, []int) {
	return fileDescriptor_6907ce5c495556a0, []int{0}
}

func (m *Instance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instance.Unmarshal(m, b)
}
func (m *Instance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instance.Marshal(b, m, deterministic)
}
func (m *Instance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instance.Merge(m, src)
}
func (m *Instance) XXX_Size() int {
	return xxx_messageInfo_Instance.Size(m)
}
func (m *Instance) XXX_DiscardUnknown() {
	xxx_messageInfo_Instance.DiscardUnknown(m)
}

var xxx_messageInfo_Instance proto.InternalMessageInfo

func (m *Instance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Instance) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Instance) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Instance) GetIpv6Prefix() string {
	if m != nil {
		return m.Ipv6Prefix
	}
	return ""
}

func (m *Instance) GetIpv6DefaultGateway() bool {
	if m != nil {
		return m.Ipv6DefaultGateway
	}
	return false
}

func (m *Instance) GetIpv4DefaultGateway() bool {
	if m != nil {
		return m.Ipv4DefaultGateway
	}
	return false
}

type Profile struct {
	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent      string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// The IPv6 prefix that gets routed to the profile client
	// Read-only
	Ipv6Prefix string `protobuf:"bytes,4,opt,name=ipv6_prefix,json=ipv6Prefix,proto3" json:"ipv6_prefix,omitempty"`
	// The IPv6 address assigned to the profile client
	// Read-only
	Ipv6Address string `protobuf:"bytes,10,opt,name=ipv6_address,json=ipv6Address,proto3" json:"ipv6_address,omitempty"`
	// The IPv6 remote peer address that gets send to the profile client
	// Read-only
	Ipv6GatewayAddress string `protobuf:"bytes,5,opt,name=ipv6_gateway_address,json=ipv6GatewayAddress,proto3" json:"ipv6_gateway_address,omitempty"`
	// The IPv6 address used as source for translated IPv4 packets
	// Read-only
	Ipv4_464XlatAddress string `protobuf:"bytes,6,opt,name=ipv4_464xlat_address,json=ipv4464xlatAddress,proto3" json:"ipv4_464xlat_address,omitempty"`
	// The IPv4 address assigned to the profile client
	// Read-only
	Ipv4Address string `protobuf:"bytes,7,opt,name=ipv4_address,json=ipv4Address,proto3" json:"ipv4_address,omitempty"`
	// The IPv4 remote peer address that gets send to the profile client
	// Read-only
	Ipv4GatewayAddress string `protobuf:"bytes,8,opt,name=ipv4_gateway_address,json=ipv4GatewayAddress,proto3" json:"ipv4_gateway_address,omitempty"`
	// A ZIP archive containing the certificates and OpenVPN profile.
	// Only available during create
	ProfileArchive []byte `protobuf:"bytes,9,opt,name=profile_archive,json=profileArchive,proto3" json:"profile_archive,omitempty"`
	// The CA certificate for the client and server certificate.
	// Only available during create
	CaCertificate string `protobuf:"bytes,11,opt,name=ca_certificate,json=caCertificate,proto3" json:"ca_certificate,omitempty"`
	// The certificate to be used by the client.
	// Only available during create
	Certificate string `protobuf:"bytes,12,opt,name=certificate,proto3" json:"certificate,omitempty"`
	// The private key to be used by the client.
	// Only available during create
	PrivateKey           string   `protobuf:"bytes,13,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Profile) Reset()         { *m = Profile{} }
func (m *Profile) String() string { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()    {}
func (*Profile) Descriptor() ([]byte, []int) {
	return fileDescriptor_6907ce5c495556a0, []int{1}
}

func (m *Profile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Profile.Unmarshal(m, b)
}
func (m *Profile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Profile.Marshal(b, m, deterministic)
}
func (m *Profile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Profile.Merge(m, src)
}
func (m *Profile) XXX_Size() int {
	return xxx_messageInfo_Profile.Size(m)
}
func (m *Profile) XXX_DiscardUnknown() {
	xxx_messageInfo_Profile.DiscardUnknown(m)
}

var xxx_messageInfo_Profile proto.InternalMessageInfo

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Profile) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Profile) GetIpv6Prefix() string {
	if m != nil {
		return m.Ipv6Prefix
	}
	return ""
}

func (m *Profile) GetIpv6Address() string {
	if m != nil {
		return m.Ipv6Address
	}
	return ""
}

func (m *Profile) GetIpv6GatewayAddress() string {
	if m != nil {
		return m.Ipv6GatewayAddress
	}
	return ""
}

func (m *Profile) GetIpv4_464XlatAddress() string {
	if m != nil {
		return m.Ipv4_464XlatAddress
	}
	return ""
}

func (m *Profile) GetIpv4Address() string {
	if m != nil {
		return m.Ipv4Address
	}
	return ""
}

func (m *Profile) GetIpv4GatewayAddress() string {
	if m != nil {
		return m.Ipv4GatewayAddress
	}
	return ""
}

func (m *Profile) GetProfileArchive() []byte {
	if m != nil {
		return m.ProfileArchive
	}
	return nil
}

func (m *Profile) GetCaCertificate() string {
	if m != nil {
		return m.CaCertificate
	}
	return ""
}

func (m *Profile) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *Profile) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func init() {
	proto.RegisterType((*Instance)(nil), "cbws.vpn.v1alpha1.Instance")
	proto.RegisterType((*Profile)(nil), "cbws.vpn.v1alpha1.Profile")
}

func init() {
	proto.RegisterFile("cbws/vpn/v1alpha1/instance.proto", fileDescriptor_6907ce5c495556a0)
}

var fileDescriptor_6907ce5c495556a0 = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0x57, 0x47, 0xd7, 0x75, 0x6e, 0x37, 0x44, 0x34, 0x50, 0xd8, 0x81, 0x65, 0x93, 0xd0, 0x7a,
	0x59, 0xbc, 0x89, 0x68, 0x87, 0x9e, 0x28, 0x43, 0x42, 0x08, 0x09, 0x4d, 0x95, 0xb8, 0x70, 0x89,
	0xbe, 0x3a, 0x4e, 0x6a, 0x48, 0x63, 0xcb, 0x71, 0xb2, 0x86, 0xa9, 0x4f, 0xc3, 0x83, 0xf0, 0x3e,
	0x7b, 0x0a, 0x14, 0xdb, 0xc9, 0xd6, 0xf6, 0xc2, 0x89, 0x53, 0xbf, 0xfc, 0xfe, 0x7c, 0xfa, 0xf5,
	0x17, 0xc7, 0xc8, 0x23, 0xb3, 0xbb, 0x1c, 0x97, 0x22, 0xc3, 0xe5, 0x15, 0xa4, 0x62, 0x0e, 0x57,
	0x98, 0x65, 0xb9, 0x82, 0x8c, 0x50, 0x5f, 0x48, 0xae, 0xb8, 0xf3, 0xa2, 0x56, 0xf8, 0xa5, 0xc8,
	0xfc, 0x46, 0x71, 0xfc, 0x3a, 0xe1, 0x3c, 0x49, 0x29, 0x06, 0xc1, 0xb0, 0xa4, 0x39, 0x2f, 0x64,
	0xa3, 0x3e, 0x7e, 0x63, 0x29, 0xfd, 0x34, 0x2b, 0x62, 0x1c, 0x15, 0x12, 0x14, 0xe3, 0x99, 0xe5,
	0x4f, 0x36, 0x79, 0xc5, 0x16, 0x34, 0x57, 0xb0, 0x10, 0x46, 0x70, 0xf6, 0x7b, 0x07, 0xf5, 0x3f,
	0xdb, 0x04, 0x8e, 0x83, 0xba, 0x19, 0x2c, 0xa8, 0xdb, 0xf1, 0x3a, 0xa3, 0xfd, 0xa9, 0x9e, 0x9d,
	0x57, 0xa8, 0x27, 0x40, 0xd2, 0x4c, 0xb9, 0x3b, 0x1a, 0xb5, 0x4f, 0xce, 0x29, 0x1a, 0x46, 0x2c,
	0x17, 0x29, 0x54, 0xa1, 0xf6, 0x3c, 0xd3, 0xec, 0xc0, 0x62, 0x5f, 0x6b, 0xeb, 0x09, 0x1a, 0x30,
	0x51, 0x5e, 0x87, 0x42, 0xd2, 0x98, 0x2d, 0xdd, 0xae, 0x56, 0xa0, 0x1a, 0xba, 0xd5, 0x88, 0x73,
	0x89, 0x8e, 0xb4, 0x20, 0xa2, 0x31, 0x14, 0xa9, 0x0a, 0x13, 0x50, 0xf4, 0x0e, 0x2a, 0x77, 0xd7,
	0xeb, 0x8c, 0xfa, 0x53, 0xa7, 0xe6, 0x3e, 0x1a, 0xea, 0x93, 0x61, 0xac, 0x23, 0xd8, 0x72, 0xf4,
	0x5a, 0x47, 0xb0, 0xee, 0x18, 0xdf, 0x3c, 0x4c, 0xde, 0xa3, 0x97, 0x75, 0x9f, 0xba, 0xd8, 0x65,
	0xf5, 0x0b, 0xb7, 0xff, 0xf7, 0x5c, 0x48, 0xfe, 0x83, 0x12, 0x95, 0xe3, 0x7b, 0x3b, 0xad, 0xda,
	0xd7, 0x91, 0xe3, 0xfb, 0x66, 0x5c, 0x9d, 0xfd, 0xe9, 0xa2, 0xbd, 0x5b, 0xc9, 0x63, 0x96, 0xfe,
	0xff, 0x92, 0x4e, 0xd1, 0x50, 0x0b, 0x20, 0x8a, 0x24, 0xcd, 0x73, 0x17, 0x99, 0x1d, 0x35, 0x36,
	0x31, 0x50, 0xdb, 0xa3, 0x6d, 0xa3, 0x95, 0xee, 0x6a, 0xa9, 0xee, 0xd1, 0xd6, 0xb1, 0xee, 0x08,
	0xc2, 0xe0, 0x3a, 0x58, 0xa6, 0xa0, 0x5a, 0x47, 0xaf, 0x75, 0x04, 0x96, 0x6a, 0x1c, 0x26, 0x46,
	0xd0, 0x2a, 0xf7, 0xda, 0x18, 0xc1, 0xe6, 0xd2, 0xcd, 0x18, 0xfd, 0xc7, 0xa5, 0x1b, 0x31, 0xce,
	0xd1, 0x73, 0x61, 0x6a, 0x0d, 0x41, 0x92, 0x39, 0x2b, 0xa9, 0xbb, 0xef, 0x75, 0x46, 0xc3, 0xe9,
	0xa1, 0x85, 0x27, 0x06, 0x75, 0xde, 0xa2, 0x43, 0x02, 0x21, 0xa1, 0x52, 0xb1, 0x98, 0x11, 0x50,
	0xd4, 0x1d, 0xe8, 0xa5, 0x07, 0x04, 0x6e, 0x1e, 0x41, 0xc7, 0x43, 0x83, 0xa7, 0x9a, 0xa1, 0xc9,
	0xf8, 0x04, 0xaa, 0xeb, 0x16, 0x92, 0x95, 0xa0, 0x68, 0xf8, 0x93, 0x56, 0xee, 0x81, 0xa9, 0xdb,
	0x42, 0x5f, 0x68, 0x35, 0xfe, 0xf6, 0x30, 0x99, 0xa2, 0xa3, 0xb5, 0xf3, 0xd2, 0xbc, 0xf9, 0xf1,
	0x3f, 0x1e, 0x17, 0x6c, 0xc3, 0x1b, 0x5d, 0x3d, 0xad, 0x3e, 0x5c, 0x7e, 0xf7, 0x13, 0xa6, 0xe6,
	0xc5, 0xcc, 0x27, 0x7c, 0x81, 0xf5, 0x2d, 0x90, 0xf0, 0x8b, 0xfa, 0xf7, 0x22, 0x91, 0x82, 0xe0,
	0xad, 0x7b, 0x61, 0xd6, 0xd3, 0x1f, 0xe8, 0xbb, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x48, 0x32,
	0xa3, 0xc2, 0x33, 0x04, 0x00, 0x00,
}
