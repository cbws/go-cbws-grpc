// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cbws/domains/v1alpha1/domain.proto

package v1alpha1

import (
	fmt "fmt"
	_ "github.com/cbws/go-cbws-grpc/cbws/iam/options/v1alpha1"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Domain struct {
	// The resource name of the domain in the following format:
	// `domains/{domain}`
	//
	// We have chosen to not include the project prefix as domain names are globally unique.
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// @OutputOnly The unique and stable id of the service account.
	UniqueId string `protobuf:"bytes,4,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	// The domain name part of the domain, in case of sidn.nl this would be sidn
	Domain string `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
	// The tld portion of the domain, for example nl, com, co.uk
	Tld string `protobuf:"bytes,6,opt,name=tld,proto3" json:"tld,omitempty"`
	// When the domain will expire
	Expiry *timestamp.Timestamp `protobuf:"bytes,7,opt,name=expiry,proto3" json:"expiry,omitempty"`
	// Whether auto renew has been enabled for this domain
	AutoRenew            bool     `protobuf:"varint,8,opt,name=auto_renew,json=autoRenew,proto3" json:"auto_renew,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Domain) Reset()         { *m = Domain{} }
func (m *Domain) String() string { return proto.CompactTextString(m) }
func (*Domain) ProtoMessage()    {}
func (*Domain) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad1f3b01c08d1e0d, []int{0}
}

func (m *Domain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Domain.Unmarshal(m, b)
}
func (m *Domain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Domain.Marshal(b, m, deterministic)
}
func (m *Domain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Domain.Merge(m, src)
}
func (m *Domain) XXX_Size() int {
	return xxx_messageInfo_Domain.Size(m)
}
func (m *Domain) XXX_DiscardUnknown() {
	xxx_messageInfo_Domain.DiscardUnknown(m)
}

var xxx_messageInfo_Domain proto.InternalMessageInfo

func (m *Domain) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Domain) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *Domain) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *Domain) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Domain) GetTld() string {
	if m != nil {
		return m.Tld
	}
	return ""
}

func (m *Domain) GetExpiry() *timestamp.Timestamp {
	if m != nil {
		return m.Expiry
	}
	return nil
}

func (m *Domain) GetAutoRenew() bool {
	if m != nil {
		return m.AutoRenew
	}
	return false
}

func init() {
	proto.RegisterType((*Domain)(nil), "cbws.domains.v1alpha1.Domain")
}

func init() {
	proto.RegisterFile("cbws/domains/v1alpha1/domain.proto", fileDescriptor_ad1f3b01c08d1e0d)
}

var fileDescriptor_ad1f3b01c08d1e0d = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x5f, 0xab, 0xd3, 0x30,
	0x18, 0xc6, 0xe9, 0x9c, 0x75, 0x8b, 0x37, 0x23, 0xa0, 0xab, 0x9d, 0x7f, 0xc6, 0xbc, 0x70, 0x20,
	0x4b, 0xd8, 0xbc, 0xf3, 0x4e, 0x27, 0x88, 0x17, 0x82, 0x14, 0xf1, 0x42, 0x0a, 0x23, 0x6d, 0xb3,
	0x2e, 0xd0, 0x26, 0x31, 0x4d, 0xd7, 0x4d, 0xf1, 0x0b, 0xfa, 0x31, 0xbc, 0x3c, 0x1f, 0xe2, 0x70,
	0x68, 0x92, 0x1e, 0xca, 0x38, 0xe7, 0x6a, 0xef, 0xfb, 0xfc, 0x9e, 0x67, 0x7d, 0x93, 0xbc, 0x60,
	0x91, 0x26, 0x4d, 0x85, 0x33, 0x51, 0x12, 0xc6, 0x2b, 0x7c, 0x5c, 0x93, 0x42, 0x1e, 0xc8, 0xda,
	0x09, 0x48, 0x2a, 0xa1, 0x05, 0x7c, 0xd2, 0x7a, 0x90, 0xf3, 0xa0, 0xce, 0x13, 0xbe, 0x31, 0x51,
	0x46, 0x4a, 0x2c, 0xa4, 0x66, 0xa2, 0x1f, 0x77, 0x82, 0xcd, 0x87, 0xcf, 0x73, 0x21, 0xf2, 0x82,
	0x62, 0x22, 0x19, 0x26, 0x9c, 0x0b, 0x4d, 0xfa, 0x74, 0xda, 0xa3, 0x69, 0xc1, 0x28, 0xd7, 0x0e,
	0xbc, 0xea, 0x81, 0x3d, 0xa3, 0x45, 0xb6, 0x4b, 0xe8, 0x81, 0x1c, 0x99, 0x50, 0xce, 0xf0, 0xac,
	0x67, 0x50, 0xb4, 0x12, 0xb5, 0x4a, 0xa9, 0x43, 0x33, 0x87, 0x4c, 0x97, 0xd4, 0x7b, 0x4c, 0x4b,
	0xa9, 0xcf, 0x0e, 0xbe, 0xbc, 0x84, 0x59, 0xad, 0xcc, 0x48, 0x17, 0x1f, 0xbe, 0xe5, 0x9a, 0x95,
	0xb4, 0xd2, 0xa4, 0x94, 0xd6, 0xb0, 0xb8, 0xf6, 0x80, 0xff, 0xc9, 0x5c, 0x07, 0x84, 0x60, 0xc8,
	0x49, 0x49, 0x03, 0x6f, 0xee, 0x2d, 0xc7, 0x91, 0xa9, 0xe1, 0x53, 0xe0, 0x4b, 0xa2, 0x28, 0xd7,
	0xc1, 0xc0, 0xa8, 0xae, 0x83, 0x33, 0x30, 0xae, 0x39, 0xfb, 0x55, 0xd3, 0x1d, 0xcb, 0x82, 0xa1,
	0x41, 0x23, 0x2b, 0x7c, 0xc9, 0xda, 0x90, 0xbd, 0xe1, 0xe0, 0xa1, 0x0d, 0xd9, 0x0e, 0x4e, 0xc0,
	0x03, 0x5d, 0x64, 0x81, 0x6f, 0xc4, 0xb6, 0x84, 0x1b, 0xe0, 0xd3, 0x93, 0x64, 0xea, 0x1c, 0x3c,
	0x9a, 0x7b, 0xcb, 0xc7, 0x9b, 0x10, 0xd9, 0x79, 0x51, 0x37, 0x2f, 0xfa, 0xde, 0xcd, 0x1b, 0x39,
	0x27, 0x7c, 0x01, 0x00, 0xa9, 0xb5, 0xd8, 0x29, 0xca, 0x69, 0x13, 0x8c, 0xe6, 0xde, 0x72, 0x14,
	0x8d, 0x5b, 0x25, 0x6a, 0x85, 0xf7, 0xe8, 0xea, 0xc3, 0x5b, 0x30, 0xed, 0x5e, 0xd8, 0x3c, 0xf7,
	0xe9, 0xfc, 0x1b, 0xbb, 0x33, 0x4e, 0xba, 0xf5, 0xf8, 0x63, 0x8b, 0xbf, 0x1f, 0x9b, 0x9f, 0x9b,
	0x9c, 0xe9, 0x43, 0x9d, 0xa0, 0x54, 0x94, 0xd8, 0xec, 0x41, 0x2e, 0x56, 0xed, 0xef, 0x2a, 0x57,
	0x32, 0xc5, 0x77, 0x2e, 0xd5, 0xbf, 0x41, 0xb8, 0x4d, 0x9a, 0x2a, 0xb6, 0xff, 0x5a, 0xc5, 0x9f,
	0xa3, 0x6f, 0xdb, 0xf8, 0x87, 0x83, 0xff, 0x07, 0xaf, 0xef, 0x87, 0xf1, 0x57, 0xaa, 0x49, 0x46,
	0x34, 0x49, 0x7c, 0x73, 0xc6, 0x77, 0x37, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xad, 0x76, 0xa7,
	0xb7, 0x02, 0x00, 0x00,
}
