// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: cbws/virtual_machines/affinity/v1alpha1/affinity.proto

package v1alpha1

import (
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LabelSelectorRequirement_Operator int32

const (
	LabelSelectorRequirement_OPERATOR_UNSPECIFIED    LabelSelectorRequirement_Operator = 0
	LabelSelectorRequirement_OPERATOR_IN             LabelSelectorRequirement_Operator = 1
	LabelSelectorRequirement_OPERATOR_NOT_IN         LabelSelectorRequirement_Operator = 2
	LabelSelectorRequirement_OPERATOR_EXISTS         LabelSelectorRequirement_Operator = 3
	LabelSelectorRequirement_OPERATOR_DOES_NOT_EXIST LabelSelectorRequirement_Operator = 4
	LabelSelectorRequirement_OPERATOR_GREATER_THAN   LabelSelectorRequirement_Operator = 5
	LabelSelectorRequirement_OPERATOR_LOWER_THAN     LabelSelectorRequirement_Operator = 6
)

// Enum value maps for LabelSelectorRequirement_Operator.
var (
	LabelSelectorRequirement_Operator_name = map[int32]string{
		0: "OPERATOR_UNSPECIFIED",
		1: "OPERATOR_IN",
		2: "OPERATOR_NOT_IN",
		3: "OPERATOR_EXISTS",
		4: "OPERATOR_DOES_NOT_EXIST",
		5: "OPERATOR_GREATER_THAN",
		6: "OPERATOR_LOWER_THAN",
	}
	LabelSelectorRequirement_Operator_value = map[string]int32{
		"OPERATOR_UNSPECIFIED":    0,
		"OPERATOR_IN":             1,
		"OPERATOR_NOT_IN":         2,
		"OPERATOR_EXISTS":         3,
		"OPERATOR_DOES_NOT_EXIST": 4,
		"OPERATOR_GREATER_THAN":   5,
		"OPERATOR_LOWER_THAN":     6,
	}
)

func (x LabelSelectorRequirement_Operator) Enum() *LabelSelectorRequirement_Operator {
	p := new(LabelSelectorRequirement_Operator)
	*p = x
	return p
}

func (x LabelSelectorRequirement_Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LabelSelectorRequirement_Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_enumTypes[0].Descriptor()
}

func (LabelSelectorRequirement_Operator) Type() protoreflect.EnumType {
	return &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_enumTypes[0]
}

func (x LabelSelectorRequirement_Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LabelSelectorRequirement_Operator.Descriptor instead.
func (LabelSelectorRequirement_Operator) EnumDescriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{5, 0}
}

// Affinity is a group of affinity scheduling rules.
type Affinity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes node affinity scheduling rules for the instance.
	NodeAffinity *NodeAffinity `protobuf:"bytes,1,opt,name=node_affinity,json=nodeAffinity,proto3" json:"node_affinity,omitempty"`
	// Describes instance affinity scheduling rules (e.g. co-locate this instance in the same node, zone, etc. as some other instance(s)).
	InstanceAffinity *InstanceAffinity `protobuf:"bytes,2,opt,name=instance_affinity,json=instanceAffinity,proto3" json:"instance_affinity,omitempty"`
	// Describes instance anti-affinity scheduling rules (e.g. avoid putting this instance in the same node, zone, etc. as some other instance(s)).
	InstanceAntiAffinity *InstanceAntiAffinity `protobuf:"bytes,3,opt,name=instance_anti_affinity,json=instanceAntiAffinity,proto3" json:"instance_anti_affinity,omitempty"`
}

func (x *Affinity) Reset() {
	*x = Affinity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Affinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Affinity) ProtoMessage() {}

func (x *Affinity) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Affinity.ProtoReflect.Descriptor instead.
func (*Affinity) Descriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{0}
}

func (x *Affinity) GetNodeAffinity() *NodeAffinity {
	if x != nil {
		return x.NodeAffinity
	}
	return nil
}

func (x *Affinity) GetInstanceAffinity() *InstanceAffinity {
	if x != nil {
		return x.InstanceAffinity
	}
	return nil
}

func (x *Affinity) GetInstanceAntiAffinity() *InstanceAntiAffinity {
	if x != nil {
		return x.InstanceAntiAffinity
	}
	return nil
}

// Node affinity is a group of node affinity scheduling rules.
type NodeAffinity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- api-linter: core::0203::required=disabled --)
	// The scheduler will prefer to schedule instances to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []*PreferredSchedulingTerm `protobuf:"bytes,1,rep,name=preferred_during_scheduling_ignored_during_execution,json=preferredDuringSchedulingIgnoredDuringExecution,proto3" json:"preferred_during_scheduling_ignored_during_execution,omitempty"`
	// If the affinity requirements specified by this field are not met at scheduling time, the instance will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during instance execution (e.g. due to an update), the system may or may not try to eventually evict the instance from its node.
	RequiredDuringSchedulingIgnoredDuringExecution *NodeSelector `protobuf:"bytes,2,opt,name=required_during_scheduling_ignored_during_execution,json=requiredDuringSchedulingIgnoredDuringExecution,proto3" json:"required_during_scheduling_ignored_during_execution,omitempty"`
}

func (x *NodeAffinity) Reset() {
	*x = NodeAffinity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeAffinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAffinity) ProtoMessage() {}

func (x *NodeAffinity) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAffinity.ProtoReflect.Descriptor instead.
func (*NodeAffinity) Descriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{1}
}

func (x *NodeAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []*PreferredSchedulingTerm {
	if x != nil {
		return x.PreferredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

func (x *NodeAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() *NodeSelector {
	if x != nil {
		return x.RequiredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
type PreferredSchedulingTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A node selector term, associated with the corresponding weight.
	Preference *NodeSelectorTerm `protobuf:"bytes,1,opt,name=preference,proto3" json:"preference,omitempty"`
	// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
	Weight int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *PreferredSchedulingTerm) Reset() {
	*x = PreferredSchedulingTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreferredSchedulingTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreferredSchedulingTerm) ProtoMessage() {}

func (x *PreferredSchedulingTerm) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreferredSchedulingTerm.ProtoReflect.Descriptor instead.
func (*PreferredSchedulingTerm) Descriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{2}
}

func (x *PreferredSchedulingTerm) GetPreference() *NodeSelectorTerm {
	if x != nil {
		return x.Preference
	}
	return nil
}

func (x *PreferredSchedulingTerm) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
type NodeSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of node selector terms. The terms are ORed.
	NodeSelectorTerms []*NodeSelectorTerm `protobuf:"bytes,1,rep,name=node_selector_terms,json=nodeSelectorTerms,proto3" json:"node_selector_terms,omitempty"`
}

func (x *NodeSelector) Reset() {
	*x = NodeSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSelector) ProtoMessage() {}

func (x *NodeSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSelector.ProtoReflect.Descriptor instead.
func (*NodeSelector) Descriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{3}
}

func (x *NodeSelector) GetNodeSelectorTerms() []*NodeSelectorTerm {
	if x != nil {
		return x.NodeSelectorTerms
	}
	return nil
}

// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
type NodeSelectorTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of node selector requirements by node's labels.
	MatchExpressions *LabelSelectorRequirement `protobuf:"bytes,1,opt,name=match_expressions,json=matchExpressions,proto3" json:"match_expressions,omitempty"`
}

func (x *NodeSelectorTerm) Reset() {
	*x = NodeSelectorTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSelectorTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSelectorTerm) ProtoMessage() {}

func (x *NodeSelectorTerm) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSelectorTerm.ProtoReflect.Descriptor instead.
func (*NodeSelectorTerm) Descriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{4}
}

func (x *NodeSelectorTerm) GetMatchExpressions() *LabelSelectorRequirement {
	if x != nil {
		return x.MatchExpressions
	}
	return nil
}

// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
type LabelSelectorRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label key that the selector applies to.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
	Operator LabelSelectorRequirement_Operator `protobuf:"varint,2,opt,name=operator,proto3,enum=cbws.virtual_machines.affinity.v1alpha1.LabelSelectorRequirement_Operator" json:"operator,omitempty"`
	// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
	Values []string `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *LabelSelectorRequirement) Reset() {
	*x = LabelSelectorRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelSelectorRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelectorRequirement) ProtoMessage() {}

func (x *LabelSelectorRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelectorRequirement.ProtoReflect.Descriptor instead.
func (*LabelSelectorRequirement) Descriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{5}
}

func (x *LabelSelectorRequirement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LabelSelectorRequirement) GetOperator() LabelSelectorRequirement_Operator {
	if x != nil {
		return x.Operator
	}
	return LabelSelectorRequirement_OPERATOR_UNSPECIFIED
}

func (x *LabelSelectorRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

// instance affinity is a group of inter instance affinity scheduling rules.
type InstanceAffinity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- api-linter: core::0203::required=disabled --)
	// The scheduler will prefer to schedule instances to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has instances which matches the corresponding instanceAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []*WeightedInstanceAffinityTerm `protobuf:"bytes,1,rep,name=preferred_during_scheduling_ignored_during_execution,json=preferredDuringSchedulingIgnoredDuringExecution,proto3" json:"preferred_during_scheduling_ignored_during_execution,omitempty"`
	// If the affinity requirements specified by this field are not met at scheduling time, the instance will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during instance execution (e.g. due to a instance label update), the system may or may not try to eventually evict the instance from its node. When there are multiple elements, the lists of nodes corresponding to each instanceAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []*InstanceAffinityTerm `protobuf:"bytes,2,rep,name=required_during_scheduling_ignored_during_execution,json=requiredDuringSchedulingIgnoredDuringExecution,proto3" json:"required_during_scheduling_ignored_during_execution,omitempty"`
}

func (x *InstanceAffinity) Reset() {
	*x = InstanceAffinity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAffinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAffinity) ProtoMessage() {}

func (x *InstanceAffinity) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAffinity.ProtoReflect.Descriptor instead.
func (*InstanceAffinity) Descriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{6}
}

func (x *InstanceAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []*WeightedInstanceAffinityTerm {
	if x != nil {
		return x.PreferredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

func (x *InstanceAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() []*InstanceAffinityTerm {
	if x != nil {
		return x.RequiredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

// The weights of all of the matched WeightedInstanceAffinityTerm fields are added per-node to find the most preferred node(s)
type WeightedInstanceAffinityTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. A instance affinity term, associated with the corresponding weight.
	InstanceAffinityTerm *InstanceAffinityTerm `protobuf:"bytes,1,opt,name=instance_affinity_term,json=instanceAffinityTerm,proto3" json:"instance_affinity_term,omitempty"`
	// weight associated with matching the corresponding instanceAffinityTerm, in the range 1-100.
	Weight int32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *WeightedInstanceAffinityTerm) Reset() {
	*x = WeightedInstanceAffinityTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedInstanceAffinityTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedInstanceAffinityTerm) ProtoMessage() {}

func (x *WeightedInstanceAffinityTerm) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedInstanceAffinityTerm.ProtoReflect.Descriptor instead.
func (*WeightedInstanceAffinityTerm) Descriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{7}
}

func (x *WeightedInstanceAffinityTerm) GetInstanceAffinityTerm() *InstanceAffinityTerm {
	if x != nil {
		return x.InstanceAffinityTerm
	}
	return nil
}

func (x *WeightedInstanceAffinityTerm) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

// Defines a set of instances (namely those matching the labelSelector relative to the given namespace(s)) that this instance should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a instance of the set of instances is running
type InstanceAffinityTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A label query over a set of resources, in this case instances.
	LabelSelector *LabelSelector `protobuf:"bytes,1,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// This instance should be co-located (affinity) or not co-located (anti-affinity) with the instances matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected instances is running. Empty topologyKey is not allowed.
	TopologyKey string `protobuf:"bytes,2,opt,name=topology_key,json=topologyKey,proto3" json:"topology_key,omitempty"`
}

func (x *InstanceAffinityTerm) Reset() {
	*x = InstanceAffinityTerm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAffinityTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAffinityTerm) ProtoMessage() {}

func (x *InstanceAffinityTerm) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAffinityTerm.ProtoReflect.Descriptor instead.
func (*InstanceAffinityTerm) Descriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{8}
}

func (x *InstanceAffinityTerm) GetLabelSelector() *LabelSelector {
	if x != nil {
		return x.LabelSelector
	}
	return nil
}

func (x *InstanceAffinityTerm) GetTopologyKey() string {
	if x != nil {
		return x.TopologyKey
	}
	return ""
}

// A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
type LabelSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions *LabelSelectorRequirement `protobuf:"bytes,1,opt,name=match_expressions,json=matchExpressions,proto3" json:"match_expressions,omitempty"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `protobuf:"bytes,2,rep,name=match_labels,json=matchLabels,proto3" json:"match_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *LabelSelector) Reset() {
	*x = LabelSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelSelector) ProtoMessage() {}

func (x *LabelSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelSelector.ProtoReflect.Descriptor instead.
func (*LabelSelector) Descriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{9}
}

func (x *LabelSelector) GetMatchExpressions() *LabelSelectorRequirement {
	if x != nil {
		return x.MatchExpressions
	}
	return nil
}

func (x *LabelSelector) GetMatchLabels() map[string]string {
	if x != nil {
		return x.MatchLabels
	}
	return nil
}

// instance anti affinity is a group of inter instance anti affinity scheduling rules.
type InstanceAntiAffinity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (-- api-linter: core::0203::required=disabled --)
	// The scheduler will prefer to schedule instances to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has instances which matches the corresponding instanceAffinityTerm; the node(s) with the highest sum are the most preferred.
	PreferredDuringSchedulingIgnoredDuringExecution []*WeightedInstanceAffinityTerm `protobuf:"bytes,1,rep,name=preferred_during_scheduling_ignored_during_execution,json=preferredDuringSchedulingIgnoredDuringExecution,proto3" json:"preferred_during_scheduling_ignored_during_execution,omitempty"`
	// If the anti-affinity requirements specified by this field are not met at scheduling time, the instance will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during instance execution (e.g. due to a instance label update), the system may or may not try to eventually evict the instance from its node. When there are multiple elements, the lists of nodes corresponding to each instanceAffinityTerm are intersected, i.e. all terms must be satisfied.
	RequiredDuringSchedulingIgnoredDuringExecution []*InstanceAffinityTerm `protobuf:"bytes,2,rep,name=required_during_scheduling_ignored_during_execution,json=requiredDuringSchedulingIgnoredDuringExecution,proto3" json:"required_during_scheduling_ignored_during_execution,omitempty"`
}

func (x *InstanceAntiAffinity) Reset() {
	*x = InstanceAntiAffinity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceAntiAffinity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceAntiAffinity) ProtoMessage() {}

func (x *InstanceAntiAffinity) ProtoReflect() protoreflect.Message {
	mi := &file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceAntiAffinity.ProtoReflect.Descriptor instead.
func (*InstanceAntiAffinity) Descriptor() ([]byte, []int) {
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP(), []int{10}
}

func (x *InstanceAntiAffinity) GetPreferredDuringSchedulingIgnoredDuringExecution() []*WeightedInstanceAffinityTerm {
	if x != nil {
		return x.PreferredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

func (x *InstanceAntiAffinity) GetRequiredDuringSchedulingIgnoredDuringExecution() []*InstanceAffinityTerm {
	if x != nil {
		return x.RequiredDuringSchedulingIgnoredDuringExecution
	}
	return nil
}

var File_cbws_virtual_machines_affinity_v1alpha1_affinity_proto protoreflect.FileDescriptor

var file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDesc = []byte{
	0x0a, 0x36, 0x63, 0x62, 0x77, 0x73, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc3, 0x02, 0x0a, 0x08, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12,
	0x5a, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x6e,
	0x6f, 0x64, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0x66, 0x0a, 0x11, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x52, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x12, 0x73, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x61, 0x6e, 0x74, 0x69, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x74, 0x69,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x22, 0xe5, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0xaf, 0x01, 0x0a, 0x34, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x2f, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa2, 0x01, 0x0a, 0x33,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x62, 0x77, 0x73,
	0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x8c, 0x01, 0x0a, 0x17, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x59, 0x0a, 0x0a,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22,
	0x79, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x69, 0x0a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x63,
	0x62, 0x77, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x11, 0x6e, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x12,
	0x6e, 0x0a, 0x11, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x62, 0x77,
	0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xdf, 0x02, 0x0a, 0x18, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x66,
	0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x4a, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xb0,
	0x01, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x14, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x45,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x50, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10,
	0x06, 0x22, 0xf6, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12, 0xb4, 0x01, 0x0a, 0x34, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x64,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x2f, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x44, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xaa, 0x01,
	0x0a, 0x33, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x62,
	0x77, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x2e, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x69, 0x6e, 0x67, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x1c, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x78, 0x0a, 0x16, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x62,
	0x77, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x98, 0x01,
	0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x79, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x5d, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4b, 0x65, 0x79, 0x22, 0xab, 0x02, 0x0a, 0x0d, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x6e, 0x0a, 0x11, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x0c, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x47, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfa, 0x02, 0x0a, 0x14, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x6e, 0x74, 0x69, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x12,
	0xb4, 0x01, 0x0a, 0x34, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45,
	0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67,
	0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x33, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x62, 0x77, 0x73, 0x2e, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x61, 0x66, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x54,
	0x65, 0x72, 0x6d, 0x52, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x44, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x64, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0xab, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x62, 0x77, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x62, 0x77, 0x73, 0x2d,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x62, 0x77, 0x73, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x2d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x2f, 0x61, 0x66, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x2b, 0x43,
	0x62, 0x77, 0x73, 0x5c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x5c, 0x47, 0x72, 0x70, 0x63, 0x5c, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x79, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x34, 0x43, 0x62, 0x77,
	0x73, 0x5c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x5c, 0x47, 0x72, 0x70, 0x63, 0x5c, 0x41, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescOnce sync.Once
	file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescData = file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDesc
)

func file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescGZIP() []byte {
	file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescOnce.Do(func() {
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescData = protoimpl.X.CompressGZIP(file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescData)
	})
	return file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDescData
}

var file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_goTypes = []interface{}{
	(LabelSelectorRequirement_Operator)(0), // 0: cbws.virtual_machines.affinity.v1alpha1.LabelSelectorRequirement.Operator
	(*Affinity)(nil),                       // 1: cbws.virtual_machines.affinity.v1alpha1.Affinity
	(*NodeAffinity)(nil),                   // 2: cbws.virtual_machines.affinity.v1alpha1.NodeAffinity
	(*PreferredSchedulingTerm)(nil),        // 3: cbws.virtual_machines.affinity.v1alpha1.PreferredSchedulingTerm
	(*NodeSelector)(nil),                   // 4: cbws.virtual_machines.affinity.v1alpha1.NodeSelector
	(*NodeSelectorTerm)(nil),               // 5: cbws.virtual_machines.affinity.v1alpha1.NodeSelectorTerm
	(*LabelSelectorRequirement)(nil),       // 6: cbws.virtual_machines.affinity.v1alpha1.LabelSelectorRequirement
	(*InstanceAffinity)(nil),               // 7: cbws.virtual_machines.affinity.v1alpha1.InstanceAffinity
	(*WeightedInstanceAffinityTerm)(nil),   // 8: cbws.virtual_machines.affinity.v1alpha1.WeightedInstanceAffinityTerm
	(*InstanceAffinityTerm)(nil),           // 9: cbws.virtual_machines.affinity.v1alpha1.InstanceAffinityTerm
	(*LabelSelector)(nil),                  // 10: cbws.virtual_machines.affinity.v1alpha1.LabelSelector
	(*InstanceAntiAffinity)(nil),           // 11: cbws.virtual_machines.affinity.v1alpha1.InstanceAntiAffinity
	nil,                                    // 12: cbws.virtual_machines.affinity.v1alpha1.LabelSelector.MatchLabelsEntry
}
var file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_depIdxs = []int32{
	2,  // 0: cbws.virtual_machines.affinity.v1alpha1.Affinity.node_affinity:type_name -> cbws.virtual_machines.affinity.v1alpha1.NodeAffinity
	7,  // 1: cbws.virtual_machines.affinity.v1alpha1.Affinity.instance_affinity:type_name -> cbws.virtual_machines.affinity.v1alpha1.InstanceAffinity
	11, // 2: cbws.virtual_machines.affinity.v1alpha1.Affinity.instance_anti_affinity:type_name -> cbws.virtual_machines.affinity.v1alpha1.InstanceAntiAffinity
	3,  // 3: cbws.virtual_machines.affinity.v1alpha1.NodeAffinity.preferred_during_scheduling_ignored_during_execution:type_name -> cbws.virtual_machines.affinity.v1alpha1.PreferredSchedulingTerm
	4,  // 4: cbws.virtual_machines.affinity.v1alpha1.NodeAffinity.required_during_scheduling_ignored_during_execution:type_name -> cbws.virtual_machines.affinity.v1alpha1.NodeSelector
	5,  // 5: cbws.virtual_machines.affinity.v1alpha1.PreferredSchedulingTerm.preference:type_name -> cbws.virtual_machines.affinity.v1alpha1.NodeSelectorTerm
	5,  // 6: cbws.virtual_machines.affinity.v1alpha1.NodeSelector.node_selector_terms:type_name -> cbws.virtual_machines.affinity.v1alpha1.NodeSelectorTerm
	6,  // 7: cbws.virtual_machines.affinity.v1alpha1.NodeSelectorTerm.match_expressions:type_name -> cbws.virtual_machines.affinity.v1alpha1.LabelSelectorRequirement
	0,  // 8: cbws.virtual_machines.affinity.v1alpha1.LabelSelectorRequirement.operator:type_name -> cbws.virtual_machines.affinity.v1alpha1.LabelSelectorRequirement.Operator
	8,  // 9: cbws.virtual_machines.affinity.v1alpha1.InstanceAffinity.preferred_during_scheduling_ignored_during_execution:type_name -> cbws.virtual_machines.affinity.v1alpha1.WeightedInstanceAffinityTerm
	9,  // 10: cbws.virtual_machines.affinity.v1alpha1.InstanceAffinity.required_during_scheduling_ignored_during_execution:type_name -> cbws.virtual_machines.affinity.v1alpha1.InstanceAffinityTerm
	9,  // 11: cbws.virtual_machines.affinity.v1alpha1.WeightedInstanceAffinityTerm.instance_affinity_term:type_name -> cbws.virtual_machines.affinity.v1alpha1.InstanceAffinityTerm
	10, // 12: cbws.virtual_machines.affinity.v1alpha1.InstanceAffinityTerm.label_selector:type_name -> cbws.virtual_machines.affinity.v1alpha1.LabelSelector
	6,  // 13: cbws.virtual_machines.affinity.v1alpha1.LabelSelector.match_expressions:type_name -> cbws.virtual_machines.affinity.v1alpha1.LabelSelectorRequirement
	12, // 14: cbws.virtual_machines.affinity.v1alpha1.LabelSelector.match_labels:type_name -> cbws.virtual_machines.affinity.v1alpha1.LabelSelector.MatchLabelsEntry
	8,  // 15: cbws.virtual_machines.affinity.v1alpha1.InstanceAntiAffinity.preferred_during_scheduling_ignored_during_execution:type_name -> cbws.virtual_machines.affinity.v1alpha1.WeightedInstanceAffinityTerm
	9,  // 16: cbws.virtual_machines.affinity.v1alpha1.InstanceAntiAffinity.required_during_scheduling_ignored_during_execution:type_name -> cbws.virtual_machines.affinity.v1alpha1.InstanceAffinityTerm
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_init() }
func file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_init() {
	if File_cbws_virtual_machines_affinity_v1alpha1_affinity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Affinity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeAffinity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreferredSchedulingTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSelectorTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSelectorRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAffinity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightedInstanceAffinityTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAffinityTerm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceAntiAffinity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_goTypes,
		DependencyIndexes: file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_depIdxs,
		EnumInfos:         file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_enumTypes,
		MessageInfos:      file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_msgTypes,
	}.Build()
	File_cbws_virtual_machines_affinity_v1alpha1_affinity_proto = out.File
	file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_rawDesc = nil
	file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_goTypes = nil
	file_cbws_virtual_machines_affinity_v1alpha1_affinity_proto_depIdxs = nil
}
